************** Backend using Javascript *************



***************************** Video 2 (How to deploy backend code in production) ********************************
Steps : 
        1. we have created a folder "chaideploy".

        2. we have run a command `npm init' ->
         -> This command will make a 'package.json' file.

         'init' is just a "utility" just like 'vite' , 'react'. this command will initialise an application jese hamm react and vite sai application banate the for creating our react application.
         
       

        3. created a 'index.js' file and write our own scripts (in "package.json" file).

        NOTE : we know that when we wants to run our javascript file in "node". then we write this command -> "node <filename>". so this time our file name is "index.js" SO command will be `node index.js`.

        ABB hame baar baar ye command na likhna pde islie hamne ekk script add kri hai ("package.json" file mai) i.e -> `start": "node index.js`

        abb hamm directly ye command likh skte hai -> "npm run start". iss command sai bhi chalega too "node index.js" hee but iss baar hame node wala command likhne ki jrurat nhi pdi

        4. run a command -> 'npm install express' (in our `chaideploy` folder). -> this command will add dependency of express in our 'package.json' file.

        5. copy and paste the "Hello World" ka code (wala code from `Getting Started` section from express.js official site) in our "index.js" file.  ABB jo bhi iss file mai likha hai wo smj mai aa jaaega & iss file mai hamne Notes bhi add krdiye hai

        6. We have run a command `npm install dotenv` and created '.env' (environment variable file in our 'root' folder) file => Read the documentation from "dotenv" website and follow the steps jo usme bataye hai

        Why we use Need this '.env' file and Why we have installed it? -> Its because maanlo hamare iss backend ke code ko koi or user use krr rha hai and hamari file mai jo 'Port Number' hamne likha hai vhi aage gaya hoga abb Problem yeh hai ki jo Port Number hamare backend file mai likha hua hai ussi Port Number par uss user ka koi or kaam chal rha hai too ESEE situation ko handle krne ke liye we use `Environment Variables`. abb JAB bhi hamm hamare project ko Production mai bhejenge (Means Deploy krenge) tab agr jo port hamne bheja hai wo free nhi hua agle user ki machine mai tab fiir hamara wala 'PORT' override ho jaaega and jo bhi user port user ki machine mai free hoga wo port par ye backend chal jaaega

        ABB ye step krne ke baad Hamari Application hogyi hai `Production Ready` (Mtlb ki now we can Deploy it).

        To Deploy -> Pasie lagenge free shyd hee hai abb koi. but fiir bhi agr hamm dekhna chhate hai ki deploy kese hota hai too fiir video mai dekhlena Itna bhi koi rocket science nhi hai
        Some Hosting Plateforms to deploy our Backend Application : DigitalOcean , Heroku , etc.

        Main iss Video mai jo sabse important tha -> 'Environment Varibles ko smjna' tha baaki sab too bss normal hee tha i.e hamne express ki website sai code copy paste kiya hamari file mai and usme `request and response` smja bss
        


*************************** Video 3 (How to connect frontend and backend in javascript | Fullstack Proxy and CORS) ****************************

* npm install axios -> 'axios' ekk Library hai jo specailly likhi gayi 'Web Request' krne ke liye, Ki data kis tarag sai aa rha hai kya hoga agr data fail hogya too kya hoga data loading ho rha hai tab kya hoga everything.
 'axios' bhi fetch jesa hee hai but 'axios` kuch additional features and  functionalities deta hai hame.

 Note : Read 'axios' Documentation from => axios npm website. BOHOT jyada hee powerfull library hai weekly install bhi bohot jydaa hai iske so read jrur krna


* C O R S (Cross Origin) Error => CORS protects our Browser by providing a Security Layer.
                Example : Hamare ghar mai ham harr kisi ko Enter hone nhi dete hai.
                
                This error says ki hamara Origin different hai (i.e cross origin).
                Cross Origin Mtlb => Url ka POrt and Backend (i.e server) ka PORT dono different hai islie yeh error aaya hai.

                How to remove this CORS(Cross Origin) Error ? => Agr hamm chhahte hai ki hame yeh CORS error nhi dikhe `console screen` mai too Hamara `URL and PORT` dono Same ORIGIN PAR hone chahiye. SAME Origin Mtlb ? => Mtlb ki hamara URL(frontend mai jo bhi link ham search krr rhe hai) uska POrt and Hamara Backend (i.e server) ka `Port` dono same hone chahiye.

                To Do So we have Below Solutions....
        
        Solutions for Cors Error => 
                1. install 'cors' npm package and import in our frontend file. (install krne ke liye and iske baare mai jaane ke liye search on google : 'cors npm').
                
                2. backend mai 'whitelist' (i.e allow) krdo. Mtlb ki whitelist krte time batado ki mai kis-kisko allow krna chhata hu

                3. Follow a Structure for URL => hamm yeh solution approach use krr rhe hai
                        isme hamm sabse pehle too frontend ki 'App.jsx' file mai and backend ki 'index.js' file mai. '/api' laga denge
                        YE `/api` ekk Structure hamm folloe krr rhe hai. See below example

                       Example :
                        Frontend mai ese likha-> axios.get('/api/jokes')
                        Backend mai ese likha ->  app.get('/api/jokes' , (req , res) => {

                        Abb yeh likhne ke baad Hamare Pass Error aayi -> 404 Not Found.

                * Error 404 not found => Maanliya frontend and backend dono ekk hee structure follow krr rhe hai but hamane backend ko kese pata ki yeh jo request aa rhi hai yeh muje accept krni hai ya nhi.
                Too ISKE liye we Have Concept of `P R O X Y`.

                * P R O X Y -> hamm frontend mai `vite.config.js` file mai jaaenge and add a proxy there.
                                Like this : 
                                server: {
                                        proxy: {
                                        '/api': 'http://localhost:3000',
                                        },
                                }, 

                                Abb Yeh krne sai kya hua ki jab bhi ham yeh Structure use krenge backend(server) sai kuch lene ke liye tab hamare frontend ki url request mai `api` mai piche sai yeh "proxy" append ho jaaega. abb backend ke pass jese hee request aayi too backend ne dekha ki yeh bhi same structure follow krr rha hai jo mai follow krr rha hu i.e '/api' wala. and isko backend verify krta hai ki iss request ke api ke andar bhi same PORT aa rha hai jo ki mai use krr rha hu. TOo fiir yeh 404 error ko resolve krdega

                    TO read about Proxy : Search on google -> Proxy react (agr hamm react sai application bana rhe hai toh) 
                                          Search on google ->  Proxy vite (agr hamm vite sai application bana rhe hai toh)  



                * Bad Practices that is followed by some companies : 
                        Log kya krte hai ki frontend folder mai `build` (npm run build) command chala dete hai and iss command sai ekk `dist` name sai folder bann jaata hai jisme saara frontend ka code jo bhi apn ne likha hota hai wo pada hota hai. but ye dist folder "Static Folder" hai kyoki abb jab bhi hamm frontend ke code mai change krenge too iss `dist` folder mai too change hoga nhi agr hamm changes chahte hai too hame iss old dist ko delete krke new `dist` folder banana padega by using `npm run build` command. abb iss `dist` folder ko yeh yaha sai backend ke folder mai move krwa dete hai Then backend mai `Middleware` (read about middlewares on google agar chaho tohh hee nhi too apn baadme pdh lenge aage) add krdete hai ki muje yeh wala static 'dist` folder sai hee frontend chahiye. abb esa krne sai hamne frontend and backend sab ekk hee jagah sai le liya hai and isse hamari cost wagara bhi save hogyi hai ki hame frontend sai kuch bhi lene jana hee nhi hai jese hee hamara server start hoga then ussike saath hee hamara frontend bhi load ho jaaega but NOTE : yeh wala frontend static hai . agr hamne original frontend file mai kuch bhi changes kiye toh hamare server par jo frontend hai usme koi bhi changes nhi honge kyoki hamne too static wali frontend ko load krwaya hai. or Agr hamm chhate hai ki changes bhi load ho too again mai vhi old process repeat krna pdega i.e old `dist` folder ko delete kro then fronten folder mai new dist folder banao then usko vha sai backend ke folder mai move kro..                                          



************************************ Video 5 (Data modeling for backend with Mongoose) ***********************************************************

* In this video we have learnt About Data Modeling/Object Modeling.

* Mongoose -> Tool used for Data Modeling / Object Modeling

* iss video mai too hamne 'StackBlitz' sai hamare data ki modeling kri hai

* data/object modeling -> ekk structure tyaar krna ki hamare database mai konsa data jaaega and kese jaaega

* Stackblitz => website hai jo bhi environment setup krdeti hai hamare liye chahe kiska bhi ho environment it will set. Mtlb ki hamre system mai chijo ko bina install kiye direct ham unhe use krr skte hai

* To do Data Modeling => 
                        We Always have to follow 3 Steps :

                        1. import mongoose from 'mongoose'; 

                        2. const subTodoSchema = new mongoose.Schema({} , {timestamps:true});  
                                // This upper line will create the Schema. here 'Schema' ekk function hai jisme 2 parameters aate hai. 1st parameter is necesaary KO ki ekk Object hota hai jisme ham hamare schema ko define krte hai and 2nd parameter is Optional, which is also an Object but iss object ke andar timestamps aata hai Mtlb ki user ne kis time par create kiya schema kis time par update kiya ye sab
                       
                        3. export const SubTodo = mongoose.model('SubTodo', subTodoSchema);

                        NOTE : step 3 ke andar '.model' naam ko jo hai wo ekk method hai jiske andar 2 parameters aate hai : 1st parameter ke andar aata hai ki `Database ke andar hamm iss Schema ka kya Name Dena Chahte hai` and 2nd Parameter is Ye jo bhi schema hamm database mai store krwana chahte hai ye `kiske (kis schema ke) base par store krwana chahte hai.

                        NOTE : step 3 ke andar try krna ki hamare Constant Variable ka naam and '.model' method ke 1st parameter ka naam (i.e name of our schema in database) same ho. Koshish yahi rkhna hamesha.

                        Note : hamm jab bhi reference dete hai kisi bhi schema ka kisi or schema ko tab reference ke andar jo schema ka ham reference name dena chahte hai wo hamesha '.model' method ke 1st parameter ka name hee dena hota hai (i.e name of our schema in database).

                        v.v.v.v.v.v.v Imp Interview NOTE => jab ham '.model' method ke andar hamare 1st parameter(i.e name of our Schema) jaata hai database mai too Database usko store kese krta hai ? => ANS : database Database mai uss Schema ka jo bhi name aaya hai usko `lowercase` mai convert krdega and usko plural banadega Mtlb ki uske saath 's' add krdega.

                                For Example : database mai Schema ka name `Todo` aaya : 
                                                                                -> then database mai it will converted and saved as 'todos'

                                Ex-2 : database mai Schema ka name 'SubTodo' aaya  -> then database mai it will converted and saved as `subtodos`

                                Ex-3 : 'categories' aaya too -> our database is very intelligent and usko dikh rha hai ki jo Schema ka name mere pass mai aaya hai wo `lowercase` mai hee hai and `plural` bhi hai. too isme database kuch bhi changes nhi krega.                                                  

                        -----> SEE code from `Stackblitz`




******************************** Video 6 (Ecommerce and Hospital management Data modelling) ********************************                       

 * enum => It means ki choices
        mtlb ki inhee choices mai sai choose krna hai and Mandatory chije hai ye sab chije jo iske andar likhi hue hai. ekk na ekk choice ko too choose krna hee hai.
        Jo values hoti hai wo ham enum ke andar dete hai. values mtlb ki Example: 'gender' hogya person ka yaa fiir We know ki Plane mai 3 types ki seats hee hoti hai too hamne kis type ki seat chahiye
        NOTE : `enum` ke anadar fields "Array" ke andar hee dii jaati hai

 See code from "Stackblitz"


 





 ************************************** Video 7 (How to setup a professional backend project) *****************************************************
 
 Project Setup Steps : 
                        1. make a separate folder for this project (Hamne Backend folder sai bahar banaya hai Project ka folder ekk dum separte folder) and run a command 'npm init'

                        npm init -> by this command node package manager will initialise a repository i.e it will create a `package.json` file

                        2. in root folder of this project (i.e megaProjectBackend folder mai) create a folder `public` and public folder ke andar create one more folder i.e `temp`

                        Now run git status command -> you will notice that git issko track nhi krr rha hai
                        Reason: git does not track empty folders unke andar files hoti hai too hee git track krta hai

                        To track Empty folder Solution ->  create a file in 'temp' folder i.e `.gitkeep`

                        .gitkeep -> empty file hee hai bss ye git ko batati hai ki jiske andar ye file padi hai uss folder ko bhi track krna hai

                        3. create '.gitignore' file in the root folder of this project

                        Now search for `gitignore` generators on google and choose any webiste and search for 'node'(kyoki hamm nodeJS use krr rhe hai) -> yeh hame nodejS ke liye generate krke de dega ki kya kya hame '.gitignore' file ke andar daalne hai i.e jinhe ignore krna hai. So copy kro uss website sai and paste it in '.gitignore' file

                        4. create a `.env` file in root folder of this project

                        5. create 'src' folder in root folder of this project (i.e in backendMegaProject folder)

                        inside 'src' folder -> create 'app.js' 'constants.js' and 'index.js' file  

                        6. go to 'package.json' file -> do some work in this file. i.e 
                        add these all in this file 
                        
                        =>   1. "type":"module" -> Javascript mai chije ko import krwane ke 2 tarike hote `common JS` sai and `module JS` sai . But ham poore project mai 'module Js' wala type use krenge jisse consistency bani rhe.

                                2. install `nodemon` -> jese hee hamari files save hoti hai yeh hamare server ko restart krdeta hai bss

                                Run this command: `npm i -D nodemon`
                                Abb nodemon install too hogya hai but hamare command ko batana bhi too pdega na ki kab nodemon ko run krna hai jisse server restart ho ske.

                                So for this,
                                Now add script for this in 'package.json' file -> "dev": "nodemon src/index.js"
                                 
                                 ABB jese hee ham "npm run dev" likhenge hamara server restart ho jaaega

                        7. Create some folders in `src` folder :

                                   1. controllers : majorly functionality yaha hogi
                                   
                                   2. db : database ko connect kese krna hai. database ka connection logic yaha likha jaata hai most of the times.

                                   3. middlewares  :  jo code hame in between run krwana hai. 
                                     For Example: hamare pass koi request aayi server usko fulfill kre usse pehle hee mai kuch Checks (conditions) lagana chahta hu ki ye request fullfill hone sai pehle ye chij check kro.
                                     Too issiko hamm middlewares kehte hai

                                     4. models : data modeling/object modeling jo hame abb ache sai aati hai. Stackblitz par hamne models banaye hai kaafi

                                     5. routes : kaha kese kiss jagah par jaana hai wo sab logic code iske andar aayega

                                     6. utils : utilities ka hee shortcut hai. hamm utils utilities ko hee kehte hai bss util ekk fancy word hai programmers ne diya hai.
                                        Ham Jab kaam krenge tab hame bohot saari utilities lagegi jese "File Upload" krna ye ekk utility hai Too File Upload hamm user sai uski profile mai bhi krwaege , videos mai bhi krwaege too kyo na iski ekk utility hee banake rkh di jaaye.
                                        Ex 2 : kaii jagah hamm `Mailing` ka bhi use krenge too kyu na ekk Mail ki bhi Utility banake rkh di jaaye.

                                        TOO In short jo-jo functionality baar baar repeat hogi uski hamm Utility hee bana dete hai.
                                        Sirf apni suvidha ke liye ye kaam kiya jaata hai.
                                        Its just a Professional approach

                                Note : Filhaal ye saare folders Empty hai too vpis vhi Problem aagyi hai i.e Git par ye folders track nhi ho rhe hai. 
                                Too ekk too solution hame pata hai ki hamm harr ekk folder mai '.gitkeep' file bana skte hai. BUT hame pata hai ki Abhi ye folders empty hai but baadme hamm isme wese bhi files add krne hee wale hai so filhaal ye folders track nhi bhi honge tab bhi chalega filhaal locally save hai baadme jab ham inme files wagara create krenge tab track ho jeega yeh too


                        8. Prettier  -> install prettier. Its a Code Formatter Extension.

                        Why we use this ? => kyoki hamm team mai bohot log kaam krte hai abb ho skta hai koi code kisi or format mai likh rha hai jese koi tab mai 3 spaces use krr rha hai koi 2 spaces use krr rha hai too end mai jab saara code mix hoga tab code mai bohot inconsistency aa jaaegi islie ham ye `Prettier Extension` install krte hai jisse sabke code ki Formatting samme ho and code readability and consistency bani rhe..

                        But ham ignore krna chahe too krr skte hai but Ham esaa krenge nhi kyoki we are following the Professional Approach

                        So Run this Command : `npm i -D prettier`

                        Abb iske install hone ke baad hame 2-3 files khudse add krni hoti hai 

                                Step 1 : Create a file `.prettierrc` in root folder. Code iss file mai sai dekhlena smj mai aajaega.

                                Step 2 : Create a file `.prettierignore` file in src folder -> Jese `.gitignore` file hoti hai wese hee yeh bhi file hoti hai Ki issme kya kya hai jo ki hame ignore krna hai. Means ki kon-konsi esee files hai jinme muje 'prettier' ko implement nhi krna hai. See Code from this file smj mai easily aajega. 







********************************************** Video 8 (How to connect database in MERN with debugging) *******************************************
<!-- Steps -->
        
        1. create a account and login on `MongoDb Atlas`
         `MongoDb Atlas` -> MongoDB Atlas is a managed cloud database service. `Online MongoDb database` provide krwata hai yeh.

         create the user and database and set your account Video mai dekhlena easy hee hai baar baar next next hee krna hai bss

        2. Setup Environment Variables (`.env file` mai set krne hai)

        3. setup Constants in 'constants.js` file

        4. install these packages : `dotenv` , `mongoose` , `express` in `root` folder of our project


v.Imp Note : Jab bhi ham Database sai baat krne ki koshish krenge tab Problem/Errors too aa skti hai SO ALWAYS FOLLOW THESE APPROACHES : 
                1.  `TRY Catch` mai wrap krdo Yaa Fiir `Promises` le skte hai (kyoki promises mai bhi erros handle ho jaati hai 'Resolve and Reject' sai)  SO Dono mai sai ekk na ekk too lena hee pdega

                2. "Database is always in Another Continent". Kehne ka mtlb ye hai ki Database sai jab bhi baat krenge too time lgta hai too hame `Async Await` lagana hee pdega. This is always a better approach

Imp NOTE : Database Connection 2 Major tarike sai establish ho skta hai :
        1. saara code 'index.js' file mai likhdo and application execute hote hee wo saara code run krwado
        
        2. ekk separate 'db' naam ka folder banau jisme database ka saara code likha hua hai and usko 'index.js' file mai import krwake use krlu.

          2nd option is more good But hamm dono hee methods dekhenge

                Method/Approach 1 : 
                        isme hamm `IIFE` ka use krr rhe hai (But chahe too normal function ko bhi use krr skte hai usko define krwake fiir usko call krwa skte hai).
                        IFFE -> Javascript mai hamne padhe hai. `Immediately Invoked Function Expressions (IIFE)` are JavaScript functions that are executed immediately after they are defined.

                        So 'index.js' file mai hamne 'IIFE' function ko define krdiya hai. `IIFE` ka SYNTAX GOOGLE PAR DEKHLENA
                        And code iss file ka iss file sai dekhlena

                        in `index.js` file : 
                                        * we have created express 'app' using express so iske liye express ko import bhi krwaya tha.
                                        
                                        * app.on -> "Custom Event Listener" hai.
                                        isme `"errorrr"` ekk custom Listener hai... Isko (app.on custom event listener) ko use krne ka mtlb hai ki express ki app mai hamne ekk custom event listener lagaya hai kyoki ho skta hai hamara database ka connection too successfully bann gaya ho 'mongoose.connect' sai BUT ho skta hai express ki jo app hai wo database sai baat nhi krr paa rhi ho shyd usme kuch error ho skta hai islie Hamne 'app.on' ka use kiya 

                        NOTE : 'index.js' file mai jo commented code hai jisme hamne Database connection banaya hai wo ekk dumm badhiya hai hamne achhi practice bhi follow kri hai i.e hamne usko ekk 'IFFE' function ke andar bhi likha hai , hamne 'try-catch' block ka bhi use kiya hai , `async-await` ka bhi use kiya hai BUT Hamne Hamari 'index.js' file ko bohot jyada polluted krdiya hai bohot bohot jyda mix jese hogya hai.
                                ISLIYE isko comment kiya hai and abb dusri Approach/Method follow krenge hamm 


                Method/Approach 2 : 
                        STEPS : 
                                1. 'db' folder ke andar create the `MongoDb Atlas` (Database) connection and export it from there.
                                2. read this line -> `As early as possible in your application, import and configure dotenv:`(From '.env npm' on google).

                                Too Accor. to this line we know ki sabse pehle too hamm yahi ('index.js' of root folder) waali file ko hee run karwanaa chahte hai too isme '.env' variables ko import krwado and do one change in `package.json` file also.

                                Add this in 'dev' script : ` -r dotenv/config --experimental-json-modules `





**
************************************************************** Video 9 (Custom api response and error handling) *********************************************************************

In this video what we have done :      

        1. Created express ki app in `app.js` file. sirf app create krke export krwayi hai iss file mai

        2. In `index.js` file of Root folder of our project. issme hamne `.then and , catch` waali conditions likhi hai (`connectDB` method ke andar). Code dekhlena smj mai aajega.

        3. install these packages : `cookie-parser , cors` by using this npm command -> `npm i cookie-parser cors`

                cors : it allows us to do settings in our cross origin resource sharing

                app.use : used when we have to do 'middleware settings' yaa fiir `configuration settings`

                cookie-parser : Iska kaam bss itna hee hai ki jo mere user ka `browser` hai na mai (mtlb hamara server) uske andar jaake 'C R U D' operations karwa paau. Menas ki user ke browser ki 'cookies' accept kra paau and 'set' kar paau. TOO uski cookies par mai Crud Operations perform kar paau

        4. use 'cors' in our app. Note : app (express ki) banne ke baad hee hamm 'cors' ka use krr skte hai. SEE CODE from `app.js`
        FOR MORE DETAILS READ THE `CORS` DOCUMENTATION

        5.  creating file in 'utils' folder -> 
                
                By CREATING OUR `asyncHandler` Higher Order function :

                * No Repetition: You don’t have to write try-catch blocks in every route handler.

                * Cleaner Code: Your route handlers are simpler and easier to read.

                * Consistent Error Handling: All errors are handled in one place, making your code more robust.
                
                * In summary, asyncHandler makes your asynchronous route handlers simpler by automatically handling errors and passing them to Express’s error-handling middleware.


                ye(`asyncHandler`) ekk wrapper banake de dega See Code from `asyncHandler.js` file in 'utils' folder.
                  ISS FILE MAI Hamne 2 Methods(dono mai sai kisi bhi method sai kar skte hai ham) discuss kre hai ye DONO hee Use Hote hai Companies mai ITS a PROFESSIONAL APPROACH. isme hamne 'Higher Order Function' ka use kiy hai

        6. Api ke Errors ko handle krna sikh rhe hai. -> FOR THIS go and search on GOOGLE : `node js api error` yeh website hame bohot saari classes degi different differnt errors ki.

                So LEts Hande API ERRORS : Create a `ApiError.js` file in "utils" folder to handle errors.
                and LEts Handle API Response : Create a 'ApiResponse.js' file in "utils" folder to handle responses . 





*************************************************** Video 10 (User and video model with hooks and JWT) ********************************************
        In this video we have done :
                        
                        1. created 'user' and 'video' model in 'user.model.js' & 'video.model.js' files (in models folder).
                        2.

                        2. run this command in root folder of our project -> `npm install mongoose-aggregate-paginate-v2` and import it in our 'video model'


                          * "use" it ('mongoose-aggregate-paginate-v2') before export .
                          For this go to middleware in mongoosea and read the docs of middlewares in mongoose.
                          "videoSchema.plugin(mongooseAggregatePaginate)"

                          `plugin` : mongoose hame allow krta hai khudke plugins ko add krne ka

                          Aggregation Pipelines in Mongoose : Mongoose hame Allow krta hai Aggrgate Queries likhne ke liye. ye queries normal queries sai alag hoti hai AND YAHI CHIJ KI VAJAH SAI HAMARA PROJECT NEXT LEVEL PAR JAAEGA.
                               

                        3. got to npm js on google search and read about : 'bcrypt' and `json-web-tokens`.
                        and install it in out root folder of our project.

                        `bcrypt` : normal plain text password ko encrypt krdeta hai.

                        `json web tokens` : create unique tokens. YEH TOKEN ekk chaabi kii tarah hai  jab tak ham isko nhi khoenge tab tak yeh safe hai but jab hamne apni chhabi ko kho diya tab jisko bhi yeh chhabi mili tab wo kuch bhi krr skta hai
                        To create jwt(json web tokens) go to `jwt.io` 

                        now import krdo inn dono ko 'user model' mai

                        4. abb hamara data direct too encrypt hota nhi hai hame data ko encrypt krwane ke liye koi method chahiye. SO go to middleware in mongoose and read about 'pre' hook.

                        `pre` hook in middleware : Jab bhi ham koi data Mongo Db par save krwane ja rhe hai usse pehle ye 'pre' hook lagado and usme jo bhi ham krwana chahte hai wo condition lagado. JEse hamare iss case mai hamm hamare password jo ki plain normal text mai bhej rhe hai ham mongodb par usse ham encrypt krwana chahte hai. too bss jab hamm iss password ko submit (i.e store) karwa rhe hai mongoDb(i.e our database) par usse pehle 'pre' hook mai iss passeord ko encrypt karwane ka logic likhdo.
                        SO ISS TARAH sai hamare password wali problem solve ho jaaegi and password encrypted form mai hee jaaega MongoDb (i.e hamare database par )

                        'pre' hook method hee hota hai i.e ekk function hee hota hai and iske parameter mai ekk event aata hai ki kis event par hamm ye hook lagana chhate hai and and ekk call-back aata hai. FOR THIS READ ABOUT THE EVENTS IN MIDDLEWARE
                        NOTE: iske (pre hook) ke second paramter mai kabhi bhi normal callback ke jese mat likhna kyoki WE Know ki 'arrow function' ke andar `this` is not supported this ka reference nhi hota hai. ISLIYE use normal function

                        `next` : hame pata hai middleware hai too uske next wale ka access bhi hoga hee middleware ke pass. kii agr ye condition check hogyi hai too iss condition check kaa jo bhi response aaya hai usse next wale ke pass bhejdo. agr saare next check hogye hai and last mai next par bheja or next MongoDb (our database) hee tha too fiir next terminate ho jaaega and fiir database mai ham chale jaaenge jo bhi next ne return kiya hai uske according

                        Do this work in 'user.model.js' file kyoki iss data model mai hee too hamne password ko define kiya hua h


                        4. Mongoose hame kuch custom methods design krne ka allow krta hai. Hamare case mai hamm mongoose mai hamare custom methods ko isliye bana rhe hai kyoki hamm hamne jo password encrypted bheja hai MongoDb mai abb jab koi user

                        5. `jwt` -> its a bearer token. MTLb ki ekk chaabi ki tarah hai. jiske pass iski chhaabi hogi database kehta hai mai usko data bhej duga. ITS a very Strong Security.

                        6. Write 'ACCESS and REFRESH TOKENS' in  ".env" file.

                        NOTE : 'ACCESS' tokens Database (MongoDb) mai store nhi hoga. Only 'REFRESH' tokens hee honge
                        ESE HEE YE WORK KRTA HAI


*************************************************** Video 11 (How to upload file in backend | Multer) ********************************************
        In this video we have done :            

                        1. install 'cloudinary' and 'multer'.

                                'cloudinary' -> ekk SDK(software develpoment kit) hai. ispe hamari files upload kete hai ham like: photos , videos , pdf's etc . ye behind the scenes 'AWS' hee use krta hai.

                                NOTE : Always use this best Approach in Production : jab bhi user sai hamm data le rhe hai pehle usko uske local server par store karwana hai and 2nd step mai usko cloudinary par upload krwnaa hai. hamm ye local storage par save krwane wale process ko bypass bhi krr skte hai but ITS a good practice.
                                WHY GOOD PRACTICE : kyoki ho skta hai cloudinary sai data nhi aa paa rha ho koi bhi 'xyz' issues ki vajah sai too agr hamare local mai wo data store pada hoga too direct data vha sai aa jaaega.

                                `multer` -> cloudinary ko use krne ke liye iski need pdti hai. Without multer we can't upload anything on       cloudinary.
                                 "multers" middlewares hee hote hai. "multers" ki help sai hee too ham hamari file jo ki "database" par save hone wali hoti hai usko pehle ham hamare 'local server' par store karwate hai.
                                IN SHORT : `Multer is indeed a middleware for handling file uploads in Express.js.`. middlewares ka use too hoga hee hoga hamari harr ekk application mai. YAHA ISS CASE MAI BHI USE HUA HAI 'multer' middleware ka jo ki bata rha hai ki jab bhi hamara user data submit krega tab uska kya karna hai. iss case mai multer ne bataya hai ki jese hee user apna data submit kre tab usko pehle too hamari local storage mai save krwao and then usko 'cloudinary' par upload krwao...
                                CHATGPT PAR SEARCH KRDENA VHA BEST EXPLANATION MILL JAAEGA. HInt  : like i am a 5th class child. hahahahahahahaha

                        2. create a utility for cloudinary.
                        i.e CREATE A FILE FOR CLOUDINARY (named : 'cloudinary.js') in "utils" folder

                        ITs totally our choice ki hamm cloudinary ki file jo hamm baar baar use krna chahte hai usko utils folder ke andar banaye yaa fiir services ke andar bananye. SO hamne utils folder ke andar banai hai

                        3. create 'middlewares' by using "multer".

                        `middleware` : Jaane sai pehle mujse milke jaana. mtlb ki wo kaam krne sai pehle ekk baar mere paas aana   

                        So lets create 'multer.middlewares.js' file in `middlewares` folder   


                        NOTE : By using `multer.memoryStorage()` -> you avoid saving files to your local disk and directly upload them to Cloudinary. 

                              & By using `multer.diskStorage()` -> we upload the uploaded files on our local disk storage. kyoki ho skta hai videos upload ho rhi ho or unki size bohot badi hp jo ki multer ki memory ki size sai badi ho TOO uss case mai hame hamara local storage use krna chahiyee islie hamm iss 'diskStorage' wale method ka use krr rhe hai.

                              SO IN SHORT : 
                                             Disk Storage : hamari local storage ki baat ho rhi hai
                                             Memory Storage : 'multer' ki memory ki baat ho rhi hai







*************************************************** Video 12 (HTTP Crash Course | https methods) ********************************************
        In this video we have done : just knowledge purpose ke liye tha video ki ye sab chijo ka knowledge hona chhaiye like "HTTP Methods" , "HTTP Statuc Codes".

        * HTTP Methos : GET , POST , HEAD , etc. 
        See the image uploaded in 'backend' folder with "HTTP Methods and HTTP Status Codes"






*************************************** Video 13 (Complete guide for router and controller with debugging) ****************************************


In this video we have done :

        Steps
                1. created 'user' controller in 'user.controller.js' file
                2. created router for user in 'user.router.js' file 
                3. import our router in 'app.js' file.

                NOTE : sabse pehle 'app.js' mai jahapar bhi hamara router(iss video mai hamne 'user router banaya' hai) import hua hai vaha router ki declaration hogi fiir vha sai hamne main router mtlb jiss bhi router par hame jana hai (iss video mai hamne "userRouter" banaya hai too hamm user Router par jaaenge ) uska method call krwa denge.
                Abb uss particular router mai router ka method call krwaya hai (iss video mai 'userRouter' par gaye hai ham) abb iss router sai hamne method bataya hai ki konse method ko call krwana hai too ham chale gaye uss particular method par abb. (Filhaal hamne iss video mai 'registerUser' wala dekha tha too uspe chale gaye Basically ye 'registerUser' ekk controller hee too hai jisme saara logic code likha hoga user ko register krne ka)

                4. Now run our script : `npm run dev`
                Agr kuch error wagara aati hai too debug krlena

                5. Abb AGR hame dekhna hai ki `registerUser` kya RESPONSE de rha hai TOo iske LIYE we will use "POSTMAN"

                "POSTMAN" -> sabhi industries mai yahi use krte hai so we will use use this postman


                TOO BSS ITNA HEE THA ISS VIDEO MAI 










******************************* Video 14(Logic building | Register controller) ************************

Things we have done in this video : 
                Steps : 

                        1. go to 'user.routes.js' file and write the middleware for handling files. Mtlb ki jab ham hamare form ko ya fiir data ko 'db' mai submit krenge tab images ya avatar upload ese hee nhi honge mtlb ki unhe handle krna pdega ki jab ki ye form/data submit kre user usse pehle ekk middleware(jaane sai pehle mujse milke jaana) lagadenge jisse hamari files bhi handle ho jaae(like upload images wagara). 
                        abb iske baad ham `user.controller.js` file mai ja skte hai and apna register user wala logic code likh skte hai  


                  NOW Solve the bugs by Debugging your code







********************************************** Video 15 (How to use postman for backend) ***************************************************
        Things that we have done in this video : 
                                                
                                                1. Pichle video(video 14) ke code ki debugging kri hai
                                                2. main Important part of this video is 'Postman' ko ache sai configure krna sikha hai. Mtlb 'url' mai jo repeat ho rha tha usko ekk jagah par save krwa diya hai. ISKO MAI YAHA NOTES MAI NHI LIKH PAAUGA agr vps smjna hai too 
                                                just go and watch this video
                                                        AT TIME-STAMP : 25:25 (THIS IS VERY IMPORTANT BECAUSE PROFESSIONALLY ISSI TARAH SAI SET/CONFIGURE HOTA HAI 'POSTMAN')













************************************* Video 16 (Access Refresh Token, Middleware and cookies in Backend) ****************************************

Things we have done in this video :
                Steps : 
                        1. Writing our 'loginUser' logic code in 'user.controller.js'
                        
                        ISS FILE mai we are creating 'Access and Refresh Tokens'

                        NOTE : 
                        * 'Refresh Tokens' -> database mai save krwate hai
                        * 'Access Tokens' -> database mai save nhi krwate hai

                        2. logoutUser -> hamm  user ko logout kab karr paaenge? -> JAB ham :
                                        1. Uss user ki Saari cookies ko clear krenge kyoki ye saari cookies server sai hee manage ho skti hai kyoki frontend mai too ham sirf unn cookies ko dekh skta hai ye hamne 'options' VARIABLE ke andar already bata diya hai

                                        2. hamare model(mongoose schema ke data model mai) mai sai 'refreshToken' ko empty krenge
                                        TABB JAAKE HAMARA USER ACHE SAI LOGOUT HOGA

                                        BSS YE 2 hee kaam krne hai to logout a user

                                NOW WE HAVE A PROBLEM : jab hame user ko login krwana hota tha tab too ham user ko find krdete the uski email ya username sai but yaha logout krwane ke liye too hamare pass kuch bhi information nhi hai too fiir logout kese krwaenge? TOO ISS PROBLEM KA SOLUTION HAI -> `Middleware`(jaane sai pehle milke jaana).

                                So lets create -> 'auth.middleware.js' -> ye middleware sirf VERIFY karega ki user hai ya nhi hai

AFTER WRITING OUR Middleware : 
STEPS : 
        1. Now lets go to routes. ASLI kaam abhi routes ke andar hoga. in 'user.routes.js' file

        2. `verifyJWT` middleware add krdiya hai hamne "logout" route ke andar (in 'user.routes.js' file ke andar) 

        NOTE : hamm chahe jitne middlewares add krr skte hai


        -----> NOW START OUR APP KA SERVER AND GO TO POSTMAN AND VHA SAI FRONTEND KE BEHALF PAR ROUTES CALL KRWAO KESE register,login, logout.
                        If any error comes then Debug it.













*********************************************************** Video-17 (Access token and refresh token in Backend) ********************************************************
In this Video we have done:
                Steps :
                        1. writing 'endpoint' for generating Access Token Again.
                        endpoint: just a fancy name. In short ham access token ko fiirse generate krr rhe hai (in "user.controller.js" file)

                        NOTE : 
                                Agr user browser computer par kaam karr rha hai too usko response mai uske cookies browser mai send krega and THEY Will be Accessible by Using : 

                                -> `req.cookies.refreshToken`

                                Agr User mobile par kaam krr rha hai too  usko response mai cookies body ke andar milegi and THEY Will Be Accessible by Using : 

                                -> `req.body.refreshToken` 

                        2. Verify that the token that we have request from the cookies. COOKIES ke andar data encryoted form mai hota hai too iss Verify wale step sai ham sirf iss token ko decode krr rhe hai

                        -> Decode by using 'jwt' SEE code from 'user.controller.js' file in "refreshAccessToken" method

                        3. After Decoding our token too hame saari information mill gyi hogi iss token ke andar. 
                        SO Now lets make a Database Request lets make a Request. iSS REQUEST MAI BSS HAMM ISS DECODED TOKEN ki `id` maangenge Databse sai. ki jo user ne request bheji hai kya database mai esa koi data (payload) available bhi hai ya nhi.


                        NOTE : isme 
                        
                        * 'incomingRefreshToken' -> encoded form mai hai jo ki hamne cookies sai liya hai
                        
                        * `user?.refreshToken` -> yeh bhi encoded hai kyoki Database mai bhi hamne sab Refresh token ko encoded form mai hee store krwaya hai

                        4. Now check user ka encoded 'refresh' token with database ka 'refresh' token jo ki encoded hee hai

                        5. Now generate new Access and Refresh Tokens. 
                        hamne access tokens and refresh tokens dono ko generate krne ka ekk hee method bana rkha hai too access token too hamne generate krna hee hai saath hee saath issi method sai refresh token bhi generate ho rha hai too hamne isse koi problem nhi hai naya refresh token bhi generate ho rha hai too bhi chalega. MAin kaam tha access token generate krna jo ki generate ho rha hai

                        NOTE : Hame pata hai hamm new 'access and refresh' tokens generate krr rhe hai too hame iske liye cookies mai bhejna hai jese isse pehle bheja tha too iske liye hamm vps sai 'safe cookies' ke liye `options` bana rhe hai.
                        uske baad ham `response bhej denge` HAM options ko baar baar use krr rhe hai too iska bhi hamm ekk alg sai method bana skte the

                        CHAHO TOO OPTIONS BANANE SAI PEHLE GENERATE krlo access and refresh tokens and chaho too isske baad krlo. ITS Alright

                        6. Go to 'user.routes.js' and isme `refreshAccessToken` ka route likho and issi route ko hamm hamara 'endpoint' bol rhe hai refresh token kaf

                         






************************** Video-18 (Writing update controllers for user | Backend with JS) *******************************************

THings we have done in this video:
        Steps : 
                1. Write the Subsscription Model in `subscription.models.js` file (in "models" folder)

                2. now go to `user.controller.js` and write these controllers(methods hee hai controllers bhi so dont get confused): 
                 `changeCurrentUserPassword`,`getCurrentUser`, `updateAccountDetails`.

                 3. now write controllers for Updating the files :
                        "updateUserAvatar",
                        "updateUserCoverImage" (iska and `updateUserAvatar` ka code same to same hai)





                                                Yaha Sai Aggregation Pipeline Started
************************************************* Video-19 (Understand the subscription Schema) **************************************************
THIS VIDEO IS VERY IMPORTANT AS ITS A BASE FOR UNDERSTANDING MONGODB AGGREGATION PIPELINES
Things we have done in this video: 

        ISME HAMNE dekha ki Subscription data model work kese krr rha hai.

        -> Hamare Subscription model mai hamne 2 objects bana rkhe hai. ekk Subscriber ka and ekk Channel ka.
        We know that jo user kisi channel ko subscribe krr rha hai wo channel bhi at the end hai too ekk user hee ekk user ka hee too channel hai wo bss hamm usko naam channel de rhe hai. TOO IN SHORT hamara `channel and subscriber` hai dono hee users hee.'

        -> Working of our subscription model : jab bhi koi user kisi channel ko subscribe krega tab internally MongoDb ekk document banaega. har ekk individual user jab bhi subscribe krega tab document banega.
        Iss document ke andar hoga ekk too uss channel ka naam jisko user ne subscribe kiya hai and ekk uss subscriber(user) ka naam jisne channel ko subscribe kiya hai.

        -> To count how much subscribers a particular channel have: abb hame paata hai har particular user ne jisne bhi kisi channel ko subscribe kiya hoga uska ekk document bana hoga. abb uss document mai sai total subscribers kese nikale jisne target channel ko subscribe kiya hai?: To do so Jitne bhi total documents create hue hai unn sambmese hame uss channel ko find krna hai ki ye targeted channel kis kis document mai present hai. jiss jiss documents mai ye channel present hoga unn sabhi documents ko ham count krdenge isse HAME total Subscribers Mill jaaenge uss particular targeted channel ke.

        -> To count how much channels a particular user have Subscribed? : Upper wala same process bss iss baar hame documents ke andar uss user ko find krna hai ( jiska hamm dekhna chahte hai ki isne kin-kin channels ko subscribe kiya hai) ki yeh user kis-kis document mai present hai fiir count krdenge unn sabhi documents ko isse hame mill jaaega KI Iss user ne kitne channels ko Subscribe kiya hai





*********************************************** Video-20(Learn Mongodb aggregation pipelines) **************************************************
 Things we have done in this video:
        
        ISS Video mai hamne jo pipelines sikhi hai wo SDE-2, SDE-3 , Startup level ya fiir Higher Levels ki sikhi hai. SO We have learnt so much advance Aggregation-pipelines. Easy hee thi muje too hard nhi lagi BSS Concentration sai dekhna hota hai video ko.
        ITS a very Professional Approachn and very easy

        -> To Count Subscribers : 'Channel' ko target krke count honge. ki konse channel ke Subscribers nikalna chahte hai ham

        -> To Count which-which Channels i have Subscribed to : `Subscriber`(user) ko target krke count honge. ki iss particular user ne kis-kis channel ko subscribe kiya hai


        -> MongoDb Operators That we have used in this Subscription model ke logic code mai (in `getUserChannelProfile` wale method mai in "user.controller.js" file):

                * "$match" -> iske baare mai code mai hee explain krdiya hai.

                * "$lookup" -> used to join 'data models' . basicaly link krwane ke liye kaam aata hai.
                        It returns an 'Array of Objects' by default.

                * "addFields" -> used to `add new fields` in our targeted 'user'. EXAMPLE : chaiaurcode channel is our targeted channel jiske hamm subscribers wagara dekh rhe hai youtube par. MTLb uss targeted user ke andar jo information pehle sai padi thi wo too cho hee hoti usime or kuch fields add krdo. RETURN kya krta hai ye hamne code mai hee comment krke bata diya haii.

                * "project" -> Iska use isliye krte hai kyoki Iski help sai ham sirf wo hee values send krte hai targeted user ki. Ham sirf vhi values return krenge jo hamm chahte hai. EXAMPLE : jab bhi hamm youtube par kisike channel par visit krte hai tab vha hame limited information dikhti hai jese ki user ke kitne subscribers hai, uska cover photo, video thumbnail, etc. TOO WO SAB kaam ham iss '$project' Operator (of MongoDb) ka use krke hee krte hai. ISke anadar jin-jin fields ka flag hamne on(i.e 1) krdiya hai sirf vhi fields return hogi in frontend to the requested user.

                Sab kaam ho jaane ke baad ham ekk response bhej rhe hai jiska use hamara 'frontend developer' krta hai jese uski needs hoti hai uss according




        Lookup Ka poora Concept : 

                -> `from` -> lookup ke andar jo "from" hota hai uska mtlb hota hai ki kaha pe jaake lookup krna hai yaani kaha jaake dekhna hai. kaha jaake haamre 'match' field wale jo usse join krwana hai. And kaha se ja rhe hai ham ? mtlb lookup krr rhe hai wo too thik hai par kahase lookup krr rhe hai? hamari present location konsi hai? Too hamm Present mai vhha khade hai jisko hamne 'match' krwaya hai match operator (MongoDb ka Operator hai) ke through. Too yaha sai hamm lookup krr rhe hai jo `match` field ke andar likha hai

                -> `local-field` -> local-field ka mtlb hota hai ki ham jaha present khade hai vha Local name kya hoga iss Lookup waali field ka. Ham present mai kaha khade hai? Ans is 'match' field ke andar jo likha hai ham vha khade hai present mai

                -> `foreign-field` -> foreign-field mtlb hota hai ki ham jaha jaake loopkup krr rhe hai uss data model mai usska kya name hai. or hamm jaa kaha rhe hai? -> Ans : 'from' field ke andar jo likha hai vha ja rhe hai ham lookup krne


                -> 'as' -> iss lookup ko jisme bhi ham return krr rhe hai ('match' wali field mai jo likha hai vha ye return hota hai) uska name kya hoga. 'match' wali field mai ye apni ekk 'field' create krta hai. 
                So in short Lookup ke andar jo kuch bhi likha hai wo jab return hoga tab wo sidha 'match' wali field ke andar jo likha hai wo too rhega hee rahega uske saath hee saath wo uske andar jaake as it is Chipak Jaaega


                NOTE : Agr lookup ke hee andar further ekk sub-pipeline hai and abb uske andar further ekk lookup hai too abb obvious hai ki ham SABSE pehle too 'match' field ke andar jo likha tha uspe khade the fiir jab pehla lookup lagaya tab uss lookup mai jo 'from' likha tha ham uske andar pahuch gaye and abb jiske andar ham currently pahuche hai 'from' ke throught agr ussi lookup ke andar ekk sub-pipeline add krdi hai and usme lookup likha hai too abb HAMM CURRENT jaha khade hai wo main pipeline jo ki iss sub-pipeline ke uppr waali pipeline ka lookup likha tha uske andar khade hai. 
                
                SUPPOSE IN OUR EXAMPLE jaha HAMNE SUB-Pipeline use ki hai Uss CASE mai sabse pehle jo ham 'user' par khade the fiir pehla lookup aaya too hamari current location thi 'user' the hamm user ki watch history get krne ke liye 'videos' mai chale gaye then ussi lookup ke andar ekk sub-pipeline add krdi jisme hamne ekk lookup likha hai too abb hamari current location hai 'videos' kyoki hamm 'user' ke baad sidha videos ke andar hee gaye the lookup ke through. AGR THORA CONFUSING LAGE TOO VIDEO VPS SAI DEKHLENA 


WE can Write Unlimited Pipelines (right now here talking about aggregation Pipelines)           










*********************************** Video-21 (How to write sub pipelines and routes) ************************
Things we have done in this video:

        -> Sub pipelines likhi hai uske notes too maine code mai hee likh diye hai. See code from 'user.controller.js' file and sub-pipelines hamne 'getWatchHistory' wale method mai use kri hai. 


        -> Afte writing all the controllers now lets write our 'routes' So go in our 'user.routes.js' file.

















        Note : 
        
                * 'app.js' -> yeh hogi `Express` ke through

                * 'mongoose' -> `database connection` hoga mongoose ke through 

                *middlewares -> hamari URl request jab hoti hai tab server uss request ko fulfil kre usse pehle uske bich mai hamm kuch checks laga dete hai ki pehle ye conditions check kro AGR ye fulfill hoti hai too aage server respond krega.

                * `async` -> iske anadar parameters aate hai : (error , req , res , next);     

                here 'next' : is our middleware